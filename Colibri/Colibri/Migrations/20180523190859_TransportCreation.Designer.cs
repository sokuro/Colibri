// <auto-generated />
using Colibri.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace Colibri.Migrations
{
    [DbContext(typeof(ColibriDbContext))]
    [Migration("20180523190859_TransportCreation")]
    partial class TransportCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Colibri.Models.Category.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Transport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand");

                    b.Property<double>("CargoVolume");

                    b.Property<string>("Color");

                    b.Property<int>("ConstructionYear");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<double>("FuelCapacity");

                    b.Property<double>("FuelConsumption");

                    b.Property<string>("FuelType");

                    b.Property<string>("Model");

                    b.Property<double>("Price");

                    b.Property<int?>("TransportId");

                    b.HasKey("Id");

                    b.HasIndex("TransportId");

                    b.ToTable("Vehicle");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Vehicle");
                });

            modelBuilder.Entity("Colibri.Models.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CareOf");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("Created");

                    b.Property<string>("FirstName");

                    b.Property<int>("HouseNumber");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<int>("Zip");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Colibri.Auto", b =>
                {
                    b.HasBaseType("Colibri.Models.Category.Transport.Vehicle");

                    b.Property<int?>("TransportId1");

                    b.Property<int?>("UserIdId");

                    b.HasIndex("TransportId1");

                    b.HasIndex("UserIdId");

                    b.ToTable("Auto");

                    b.HasDiscriminator().HasValue("Auto");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Caravan", b =>
                {
                    b.HasBaseType("Colibri.Models.Category.Transport.Vehicle");

                    b.Property<int?>("TransportId1")
                        .HasColumnName("Caravan_TransportId1");

                    b.HasIndex("TransportId1");

                    b.ToTable("Caravan");

                    b.HasDiscriminator().HasValue("Caravan");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Miscellaneous", b =>
                {
                    b.HasBaseType("Colibri.Models.Category.Transport.Vehicle");

                    b.Property<int?>("TransportId1")
                        .HasColumnName("Miscellaneous_TransportId1");

                    b.HasIndex("TransportId1");

                    b.ToTable("Miscellaneous");

                    b.HasDiscriminator().HasValue("Miscellaneous");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Motorcycle", b =>
                {
                    b.HasBaseType("Colibri.Models.Category.Transport.Vehicle");

                    b.Property<int?>("TransportId1")
                        .HasColumnName("Motorcycle_TransportId1");

                    b.HasIndex("TransportId1");

                    b.ToTable("Motorcycle");

                    b.HasDiscriminator().HasValue("Motorcycle");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Oldtimer", b =>
                {
                    b.HasBaseType("Colibri.Models.Category.Transport.Vehicle");

                    b.Property<int?>("TransportId1")
                        .HasColumnName("Oldtimer_TransportId1");

                    b.HasIndex("TransportId1");

                    b.ToTable("Oldtimer");

                    b.HasDiscriminator().HasValue("Oldtimer");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Parking", b =>
                {
                    b.HasBaseType("Colibri.Models.Category.Transport.Vehicle");

                    b.Property<int?>("TransportId1")
                        .HasColumnName("Parking_TransportId1");

                    b.HasIndex("TransportId1");

                    b.ToTable("Parking");

                    b.HasDiscriminator().HasValue("Parking");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Tractor", b =>
                {
                    b.HasBaseType("Colibri.Models.Category.Transport.Vehicle");

                    b.Property<int?>("TransportId1")
                        .HasColumnName("Tractor_TransportId1");

                    b.HasIndex("TransportId1");

                    b.ToTable("Tractor");

                    b.HasDiscriminator().HasValue("Tractor");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Trailer", b =>
                {
                    b.HasBaseType("Colibri.Models.Category.Transport.Vehicle");

                    b.Property<int?>("TransportId1")
                        .HasColumnName("Trailer_TransportId1");

                    b.HasIndex("TransportId1");

                    b.ToTable("Trailer");

                    b.HasDiscriminator().HasValue("Trailer");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Vespa", b =>
                {
                    b.HasBaseType("Colibri.Models.Category.Transport.Vehicle");

                    b.Property<int?>("TransportId1")
                        .HasColumnName("Vespa_TransportId1");

                    b.HasIndex("TransportId1");

                    b.ToTable("Vespa");

                    b.HasDiscriminator().HasValue("Vespa");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Vehicle", b =>
                {
                    b.HasOne("Colibri.Models.Category.Transport.Transport")
                        .WithMany("Vehicles")
                        .HasForeignKey("TransportId");
                });

            modelBuilder.Entity("Colibri.Auto", b =>
                {
                    b.HasOne("Colibri.Models.Category.Transport.Transport")
                        .WithMany("Autos")
                        .HasForeignKey("TransportId1");

                    b.HasOne("Colibri.Models.User.User", "UserId")
                        .WithMany()
                        .HasForeignKey("UserIdId");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Caravan", b =>
                {
                    b.HasOne("Colibri.Models.Category.Transport.Transport")
                        .WithMany("Caravans")
                        .HasForeignKey("TransportId1");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Miscellaneous", b =>
                {
                    b.HasOne("Colibri.Models.Category.Transport.Transport")
                        .WithMany("Miscellaneous")
                        .HasForeignKey("TransportId1");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Motorcycle", b =>
                {
                    b.HasOne("Colibri.Models.Category.Transport.Transport")
                        .WithMany("Motorcycles")
                        .HasForeignKey("TransportId1");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Oldtimer", b =>
                {
                    b.HasOne("Colibri.Models.Category.Transport.Transport")
                        .WithMany("Oldtimers")
                        .HasForeignKey("TransportId1");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Parking", b =>
                {
                    b.HasOne("Colibri.Models.Category.Transport.Transport")
                        .WithMany("Parkings")
                        .HasForeignKey("TransportId1");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Tractor", b =>
                {
                    b.HasOne("Colibri.Models.Category.Transport.Transport")
                        .WithMany("Tractors")
                        .HasForeignKey("TransportId1");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Trailer", b =>
                {
                    b.HasOne("Colibri.Models.Category.Transport.Transport")
                        .WithMany("Trailers")
                        .HasForeignKey("TransportId1");
                });

            modelBuilder.Entity("Colibri.Models.Category.Transport.Vespa", b =>
                {
                    b.HasOne("Colibri.Models.Category.Transport.Transport")
                        .WithMany("Vespas")
                        .HasForeignKey("TransportId1");
                });
#pragma warning restore 612, 618
        }
    }
}
